class Solution {
private:
void  findDistBFS(vector<int>&edges,vector<int>&dist,int node){
    dist[node]=0;
    queue<pair<int,int>> q;
    q.push({0,node});

    unordered_set<int> vis;
    vis.insert(node);
    while(!q.empty()){
        auto [steps,front]=q.front();
        q.pop();
        int neighbour=edges[front];

        if(neighbour!=-1 && !vis.count(neighbour)){
            // neigh exists
            dist[neighbour]=steps+1;
            q.push({steps+1,neighbour});
            vis.insert(neighbour);
        }
    }
}  
public:
    int closestMeetingNode(vector<int>& edges, int node1, int node2) {
        int totalNodes = edges.size();
        vector<int> dist1;
        vector<int> dist2;
        dist1.resize(totalNodes,INT_MAX);
        dist2.resize(totalNodes,INT_MAX);

        findDistBFS(edges,dist1,node1);
        findDistBFS(edges,dist2,node2);

        int minDist=INT_MAX;
        int resNode=-1;
        for(int i=0;i<totalNodes;i++){
            int curDist=max(dist1[i],dist2[i]);
            if(curDist<minDist){
                minDist=curDist;
                resNode=i;
            }
        }


        return resNode;
    }
};
