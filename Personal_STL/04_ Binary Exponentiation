

## 🔥 What is Binary Exponentiation?

Binary Exponentiation is an efficient algorithm to compute $a^n$ (i.e., `a` raised to the power `n`) in **O(log n)** time by using the **binary representation** of the exponent `n`.

It works using:

* **Repeated squaring** (to avoid multiplying `a` many times),
* **Binary decomposition** of the exponent (e.g., 13 → 1101 in binary).

---

## ✨ Idea Behind It

Any integer power can be broken into powers of 2:

$$
a^{13} = a^{1101_2} = a^8 \cdot a^4 \cdot a^1
$$

Here’s how:

* Convert `n` to binary.
* Traverse its bits from LSB to MSB (or vice versa).
* For each bit:

  * Square the current base.
  * If the bit is `1`, multiply the result.

---

## 🔎 Dry Run Example: `a = 3`, `n = 13`

### Binary of 13:

```
13 = 1101 (in binary)
= 8 + 4 + 0 + 1
```

### Steps:

| Step            | Binary Bit                           | Base (a)           | Result    |
| --------------- | ------------------------------------ | ------------------ | --------- |
| Init            | -                                    | 3                  | 1         |
| Bit 0 (LSB) = 1 | yes → res = res × base = 1 × 3       | base = 3^2 = 9     | res = 3   |
| Bit 1 = 0       | no change                            | base = 9^2 = 81    | res = 3   |
| Bit 2 = 1       | yes → res = 3 × 81 = 243             | base = 81^2 = 6561 | res = 243 |
| Bit 3 = 1       | yes → res = 243 × 6561 = **1594323** | Done               | ✅         |

### Final Answer: $3^{13} = 1594323$

---

## ✅ C++ Code

### ➤ Iterative Version

```cpp
#include <iostream>
using namespace std;

long long binaryExponentiation(long long a, long long n) {
    long long result = 1;
    while (n > 0) {
        if (n & 1) {
            result *= a; // If current bit is 1, multiply result by a
        }
        a *= a;         // Square the base
        n >>= 1;        // Shift exponent right by 1 (divide by 2)
    }
    return result;
}

int main() {
    long long a = 3, n = 13;
    cout << a << "^" << n << " = " << binaryExponentiation(a, n) << endl;
    return 0;
}
```

---

## ➤ Recursive Version

```cpp
long long binExpRecursive(long long a, long long n) {
    if (n == 0) return 1;
    long long half = binExpRecursive(a, n / 2);
    if (n % 2 == 0) return half * half;
    else return half * half * a;
}
```

---

## 🔐 Bonus: Binary Exponentiation with Modulo (for large numbers)

```cpp
long long binExpMod(long long a, long long n, long long mod) {
    long long result = 1;
    a %= mod;
    while (n > 0) {
        if (n & 1)
            result = (result * a) % mod;
        a = (a * a) % mod;
        n >>= 1;
    }
    return result;
}
```

---

## 🎯 Use Cases

* Fast power calculation
* Modular exponentiation (e.g., in cryptography)
* Solving exponent-related problems in DSA/CP

