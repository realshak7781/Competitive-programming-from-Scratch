
üìò SPF (Smallest Prime Factor) ‚Äì Quick Notes
üîç Definition:
‚Ä¢ SPF[i] = the smallest prime number that divides i.
‚Ä¢ For a prime number p, SPF[p] = p.
üöÄ Why Use SPF?
‚Ä¢ Efficient prime factorization of any number in O(log n) time.
‚Ä¢ Faster than trial division (O(‚àön)).
‚Ä¢ Useful in problems involving:
    ‚ó¶ Multiple queries
    ‚ó¶ Prime factor connections (e.g., DSU problems)
    ‚ó¶ Optimization over Sieve of Eratosthenes when factors are needed
‚öôÔ∏è Technique: Precomputing SPF using Modified Sieve

vector<int> spf(n + 1);
for (int i = 0; i <= n; i++) spf[i] = i;

for (int i = 2; i * i <= n; i++) {
    if (spf[i] == i) { // i is prime
        for (int j = i * i; j <= n; j += i) {
            if (spf[j] == j) {
                spf[j] = i;  // Set smallest prime factor
            }
        }
    }
}

üîÑ How to Factorize a Number Using SPF

int x = num;
unordered_set<int> factors;
while (x > 1) {
    factors.insert(spf[x]);
    x /= spf[x];
}

‚Ä¢ Guarantees distinct prime factors.
‚Ä¢ Time: O(log x) per number
‚è±Ô∏è Time & Space ComplexityTaskComplexitySPF PreprocessingO(N log log N)Factorization per numberO(log N)SpaceO(N)
‚úÖ Use SPF When:
‚Ä¢ You need distinct prime factors of many numbers.
‚Ä¢ You're solving problems like LeetCode 952 (Largest Component Size by Common Factor).
‚Ä¢ You want to optimize over regular Sieve for factorization.
